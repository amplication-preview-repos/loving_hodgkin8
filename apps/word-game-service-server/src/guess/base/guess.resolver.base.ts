/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Guess } from "./Guess";
import { GuessCountArgs } from "./GuessCountArgs";
import { GuessFindManyArgs } from "./GuessFindManyArgs";
import { GuessFindUniqueArgs } from "./GuessFindUniqueArgs";
import { CreateGuessArgs } from "./CreateGuessArgs";
import { UpdateGuessArgs } from "./UpdateGuessArgs";
import { DeleteGuessArgs } from "./DeleteGuessArgs";
import { Game } from "../../game/base/Game";
import { Word } from "../../word/base/Word";
import { GuessService } from "../guess.service";
@graphql.Resolver(() => Guess)
export class GuessResolverBase {
  constructor(protected readonly service: GuessService) {}

  async _guessesMeta(
    @graphql.Args() args: GuessCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Guess])
  async guesses(@graphql.Args() args: GuessFindManyArgs): Promise<Guess[]> {
    return this.service.guesses(args);
  }

  @graphql.Query(() => Guess, { nullable: true })
  async guess(
    @graphql.Args() args: GuessFindUniqueArgs
  ): Promise<Guess | null> {
    const result = await this.service.guess(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Guess)
  async createGuess(@graphql.Args() args: CreateGuessArgs): Promise<Guess> {
    return await this.service.createGuess({
      ...args,
      data: {
        ...args.data,

        game: args.data.game
          ? {
              connect: args.data.game,
            }
          : undefined,

        word: args.data.word
          ? {
              connect: args.data.word,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Guess)
  async updateGuess(
    @graphql.Args() args: UpdateGuessArgs
  ): Promise<Guess | null> {
    try {
      return await this.service.updateGuess({
        ...args,
        data: {
          ...args.data,

          game: args.data.game
            ? {
                connect: args.data.game,
              }
            : undefined,

          word: args.data.word
            ? {
                connect: args.data.word,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Guess)
  async deleteGuess(
    @graphql.Args() args: DeleteGuessArgs
  ): Promise<Guess | null> {
    try {
      return await this.service.deleteGuess(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Game, {
    nullable: true,
    name: "game",
  })
  async getGame(@graphql.Parent() parent: Guess): Promise<Game | null> {
    const result = await this.service.getGame(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Word, {
    nullable: true,
    name: "word",
  })
  async getWord(@graphql.Parent() parent: Guess): Promise<Word | null> {
    const result = await this.service.getWord(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
